// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Dictionary.services.aonaware.com {
    
    
    /// <remarks/>
    /// <remarks>
///Word Dictionary Web Service
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="DictServiceSoap", Namespace="http://services.aonaware.com/webservices/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DictService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ServerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DictionaryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DictionaryListExtendedOperationCompleted;
        
        private System.Threading.SendOrPostCallback DictionaryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DefineOperationCompleted;
        
        private System.Threading.SendOrPostCallback DefineInDictOperationCompleted;
        
        private System.Threading.SendOrPostCallback StrategyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback MatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback MatchInDictOperationCompleted;
        
        public DictService() {
            this.Url = "http://services.aonaware.com/DictService/DictService.asmx";
        }
        
        public DictService(string url) {
            this.Url = url;
        }
        
        public event ServerInfoCompletedEventHandler ServerInfoCompleted;
        
        public event DictionaryListCompletedEventHandler DictionaryListCompleted;
        
        public event DictionaryListExtendedCompletedEventHandler DictionaryListExtendedCompleted;
        
        public event DictionaryInfoCompletedEventHandler DictionaryInfoCompleted;
        
        public event DefineCompletedEventHandler DefineCompleted;
        
        public event DefineInDictCompletedEventHandler DefineInDictCompleted;
        
        public event StrategyListCompletedEventHandler StrategyListCompleted;
        
        public event MatchCompletedEventHandler MatchCompleted;
        
        public event MatchInDictCompletedEventHandler MatchInDictCompleted;
        
        /// <remarks>
///Show remote server information
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/ServerInfo", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string ServerInfo() {
            object[] results = this.Invoke("ServerInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginServerInfo(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ServerInfo", new object[0], callback, asyncState);
        }
        
        public string EndServerInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void ServerInfoAsync() {
            this.ServerInfoAsync(null);
        }
        
        public void ServerInfoAsync(object userState) {
            if ((this.ServerInfoOperationCompleted == null)) {
                this.ServerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerInfoCompleted);
            }
            this.InvokeAsync("ServerInfo", new object[0], this.ServerInfoOperationCompleted, userState);
        }
        
        private void OnServerInfoCompleted(object arg) {
            if ((this.ServerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServerInfoCompleted(this, new ServerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Returns a list of available dictionaries
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/DictionaryList", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Dictionary[] DictionaryList() {
            object[] results = this.Invoke("DictionaryList", new object[0]);
            return ((Dictionary[])(results[0]));
        }
        
        public System.IAsyncResult BeginDictionaryList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DictionaryList", new object[0], callback, asyncState);
        }
        
        public Dictionary[] EndDictionaryList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Dictionary[])(results[0]));
        }
        
        public void DictionaryListAsync() {
            this.DictionaryListAsync(null);
        }
        
        public void DictionaryListAsync(object userState) {
            if ((this.DictionaryListOperationCompleted == null)) {
                this.DictionaryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDictionaryListCompleted);
            }
            this.InvokeAsync("DictionaryList", new object[0], this.DictionaryListOperationCompleted, userState);
        }
        
        private void OnDictionaryListCompleted(object arg) {
            if ((this.DictionaryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DictionaryListCompleted(this, new DictionaryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Returns a list of advanced dictionaries (e.g. translating dictionaries)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/DictionaryListExtended", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Dictionary[] DictionaryListExtended() {
            object[] results = this.Invoke("DictionaryListExtended", new object[0]);
            return ((Dictionary[])(results[0]));
        }
        
        public System.IAsyncResult BeginDictionaryListExtended(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DictionaryListExtended", new object[0], callback, asyncState);
        }
        
        public Dictionary[] EndDictionaryListExtended(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Dictionary[])(results[0]));
        }
        
        public void DictionaryListExtendedAsync() {
            this.DictionaryListExtendedAsync(null);
        }
        
        public void DictionaryListExtendedAsync(object userState) {
            if ((this.DictionaryListExtendedOperationCompleted == null)) {
                this.DictionaryListExtendedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDictionaryListExtendedCompleted);
            }
            this.InvokeAsync("DictionaryListExtended", new object[0], this.DictionaryListExtendedOperationCompleted, userState);
        }
        
        private void OnDictionaryListExtendedCompleted(object arg) {
            if ((this.DictionaryListExtendedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DictionaryListExtendedCompleted(this, new DictionaryListExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Show information about the specified dictionary
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/DictionaryInfo", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string DictionaryInfo(string dictId) {
            object[] results = this.Invoke("DictionaryInfo", new object[] {
                        dictId});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginDictionaryInfo(string dictId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DictionaryInfo", new object[] {
                        dictId}, callback, asyncState);
        }
        
        public string EndDictionaryInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void DictionaryInfoAsync(string dictId) {
            this.DictionaryInfoAsync(dictId, null);
        }
        
        public void DictionaryInfoAsync(string dictId, object userState) {
            if ((this.DictionaryInfoOperationCompleted == null)) {
                this.DictionaryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDictionaryInfoCompleted);
            }
            this.InvokeAsync("DictionaryInfo", new object[] {
                        dictId}, this.DictionaryInfoOperationCompleted, userState);
        }
        
        private void OnDictionaryInfoCompleted(object arg) {
            if ((this.DictionaryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DictionaryInfoCompleted(this, new DictionaryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Define given word, returning definitions from all dictionaries
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/Define", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public WordDefinition Define(string word) {
            object[] results = this.Invoke("Define", new object[] {
                        word});
            return ((WordDefinition)(results[0]));
        }
        
        public System.IAsyncResult BeginDefine(string word, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Define", new object[] {
                        word}, callback, asyncState);
        }
        
        public WordDefinition EndDefine(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WordDefinition)(results[0]));
        }
        
        public void DefineAsync(string word) {
            this.DefineAsync(word, null);
        }
        
        public void DefineAsync(string word, object userState) {
            if ((this.DefineOperationCompleted == null)) {
                this.DefineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefineCompleted);
            }
            this.InvokeAsync("Define", new object[] {
                        word}, this.DefineOperationCompleted, userState);
        }
        
        private void OnDefineCompleted(object arg) {
            if ((this.DefineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DefineCompleted(this, new DefineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Define given word, returning definitions from specified dictionary
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/DefineInDict", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public WordDefinition DefineInDict(string dictId, string word) {
            object[] results = this.Invoke("DefineInDict", new object[] {
                        dictId,
                        word});
            return ((WordDefinition)(results[0]));
        }
        
        public System.IAsyncResult BeginDefineInDict(string dictId, string word, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DefineInDict", new object[] {
                        dictId,
                        word}, callback, asyncState);
        }
        
        public WordDefinition EndDefineInDict(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WordDefinition)(results[0]));
        }
        
        public void DefineInDictAsync(string dictId, string word) {
            this.DefineInDictAsync(dictId, word, null);
        }
        
        public void DefineInDictAsync(string dictId, string word, object userState) {
            if ((this.DefineInDictOperationCompleted == null)) {
                this.DefineInDictOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefineInDictCompleted);
            }
            this.InvokeAsync("DefineInDict", new object[] {
                        dictId,
                        word}, this.DefineInDictOperationCompleted, userState);
        }
        
        private void OnDefineInDictCompleted(object arg) {
            if ((this.DefineInDictCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DefineInDictCompleted(this, new DefineInDictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Return list of all available strategies on the server
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/StrategyList", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Strategy[] StrategyList() {
            object[] results = this.Invoke("StrategyList", new object[0]);
            return ((Strategy[])(results[0]));
        }
        
        public System.IAsyncResult BeginStrategyList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StrategyList", new object[0], callback, asyncState);
        }
        
        public Strategy[] EndStrategyList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Strategy[])(results[0]));
        }
        
        public void StrategyListAsync() {
            this.StrategyListAsync(null);
        }
        
        public void StrategyListAsync(object userState) {
            if ((this.StrategyListOperationCompleted == null)) {
                this.StrategyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStrategyListCompleted);
            }
            this.InvokeAsync("StrategyList", new object[0], this.StrategyListOperationCompleted, userState);
        }
        
        private void OnStrategyListCompleted(object arg) {
            if ((this.StrategyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StrategyListCompleted(this, new StrategyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Look for matching words in all dictionaries using the given strategy
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/Match", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public DictionaryWord[] Match(string word, string strategy) {
            object[] results = this.Invoke("Match", new object[] {
                        word,
                        strategy});
            return ((DictionaryWord[])(results[0]));
        }
        
        public System.IAsyncResult BeginMatch(string word, string strategy, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Match", new object[] {
                        word,
                        strategy}, callback, asyncState);
        }
        
        public DictionaryWord[] EndMatch(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DictionaryWord[])(results[0]));
        }
        
        public void MatchAsync(string word, string strategy) {
            this.MatchAsync(word, strategy, null);
        }
        
        public void MatchAsync(string word, string strategy, object userState) {
            if ((this.MatchOperationCompleted == null)) {
                this.MatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMatchCompleted);
            }
            this.InvokeAsync("Match", new object[] {
                        word,
                        strategy}, this.MatchOperationCompleted, userState);
        }
        
        private void OnMatchCompleted(object arg) {
            if ((this.MatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MatchCompleted(this, new MatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Look for matching words in the specified dictionary using the given strategy
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://services.aonaware.com/webservices/MatchInDict", RequestNamespace="http://services.aonaware.com/webservices/", ResponseNamespace="http://services.aonaware.com/webservices/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public DictionaryWord[] MatchInDict(string dictId, string word, string strategy) {
            object[] results = this.Invoke("MatchInDict", new object[] {
                        dictId,
                        word,
                        strategy});
            return ((DictionaryWord[])(results[0]));
        }
        
        public System.IAsyncResult BeginMatchInDict(string dictId, string word, string strategy, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MatchInDict", new object[] {
                        dictId,
                        word,
                        strategy}, callback, asyncState);
        }
        
        public DictionaryWord[] EndMatchInDict(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DictionaryWord[])(results[0]));
        }
        
        public void MatchInDictAsync(string dictId, string word, string strategy) {
            this.MatchInDictAsync(dictId, word, strategy, null);
        }
        
        public void MatchInDictAsync(string dictId, string word, string strategy, object userState) {
            if ((this.MatchInDictOperationCompleted == null)) {
                this.MatchInDictOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMatchInDictCompleted);
            }
            this.InvokeAsync("MatchInDict", new object[] {
                        dictId,
                        word,
                        strategy}, this.MatchInDictOperationCompleted, userState);
        }
        
        private void OnMatchInDictCompleted(object arg) {
            if ((this.MatchInDictCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MatchInDictCompleted(this, new MatchInDictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Dictionary {
        
        /// <remarks/>
        public string Id;
        
        /// <remarks/>
        public string Name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class WordDefinition {
        
        /// <remarks/>
        public string Word;
        
        /// <remarks/>
        public Definition[] Definitions;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Definition {
        
        /// <remarks/>
        public string Word;
        
        /// <remarks/>
        public Dictionary Dictionary;
        
        /// <remarks/>
        public string WordDefinition;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Strategy {
        
        /// <remarks/>
        public string Id;
        
        /// <remarks/>
        public string Description;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class DictionaryWord {
        
        /// <remarks/>
        public string DictionaryId;
        
        /// <remarks/>
        public string Word;
    }
    
    public partial class ServerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void ServerInfoCompletedEventHandler(object sender, ServerInfoCompletedEventArgs args);
    
    public partial class DictionaryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DictionaryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Dictionary[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Dictionary[])(this.results[0]));
            }
        }
    }
    
    public delegate void DictionaryListCompletedEventHandler(object sender, DictionaryListCompletedEventArgs args);
    
    public partial class DictionaryListExtendedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DictionaryListExtendedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Dictionary[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Dictionary[])(this.results[0]));
            }
        }
    }
    
    public delegate void DictionaryListExtendedCompletedEventHandler(object sender, DictionaryListExtendedCompletedEventArgs args);
    
    public partial class DictionaryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DictionaryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void DictionaryInfoCompletedEventHandler(object sender, DictionaryInfoCompletedEventArgs args);
    
    public partial class DefineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DefineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WordDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WordDefinition)(this.results[0]));
            }
        }
    }
    
    public delegate void DefineCompletedEventHandler(object sender, DefineCompletedEventArgs args);
    
    public partial class DefineInDictCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DefineInDictCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WordDefinition Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WordDefinition)(this.results[0]));
            }
        }
    }
    
    public delegate void DefineInDictCompletedEventHandler(object sender, DefineInDictCompletedEventArgs args);
    
    public partial class StrategyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StrategyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Strategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Strategy[])(this.results[0]));
            }
        }
    }
    
    public delegate void StrategyListCompletedEventHandler(object sender, StrategyListCompletedEventArgs args);
    
    public partial class MatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DictionaryWord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DictionaryWord[])(this.results[0]));
            }
        }
    }
    
    public delegate void MatchCompletedEventHandler(object sender, MatchCompletedEventArgs args);
    
    public partial class MatchInDictCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MatchInDictCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DictionaryWord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DictionaryWord[])(this.results[0]));
            }
        }
    }
    
    public delegate void MatchInDictCompletedEventHandler(object sender, MatchInDictCompletedEventArgs args);
}
